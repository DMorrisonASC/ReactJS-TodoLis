{"version":3,"sources":["serviceWorker.js","Components/firebase.js","Components/Header.js","Components/Todos.js","Components/Footer.js","App.js","Components/CreateTodo.js","Components/EditDeleteTodo.js","index.js"],"names":["Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Header","Todos","props","inputRef","useRef","className","type","checked","item","completed","onChange","e","handleChange","id","text","onSubmit","name","placeholder","ref","Footer","App","useState","prevTodos","setTodos","didOnsubmitRun","setOnsubmit","logData","rowData","flattenTodo","val","flatMap","todos","Object","values","event","target","value","updatedCheckbox","map","checkBox","updatedText","todo","console","log","preventDefault","useEffect","database","on","todoComponents","key","to","CreateTodo","newTodo","addTodo","redirectToHome","gotoHome","push","set","EditDeleteTodo","ReactDOM","render","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0f0643a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from \"firebase\"\r\nconst config = {\r\n    apiKey: \"AIzaSyBfKIgcdralsTcFirx40RrfbgL_APKHp3Y\",\r\n    authDomain: \"react-todo-list-1d0f8.firebaseapp.com\",\r\n    databaseURL: \"https://react-todo-list-1d0f8.firebaseio.com\",\r\n    projectId: \"react-todo-list-1d0f8\",\r\n    storageBucket: \"react-todo-list-1d0f8.appspot.com\",\r\n    messagingSenderId: \"81120153975\",\r\n    appId: \"1:81120153975:web:7eadb86517a58870459172\",\r\n    measurementId: \"G-P1WSJDDNNW\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(config);\r\n// firebase.analytics();\r\nexport default firebase;\r\n","import React from \"react\"\r\n\r\nfunction Header() {\r\n    return(\r\n        <header>Todo-List!</header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {useRef} from 'react';\r\n\r\nfunction Todos(props){\r\n    const inputRef = useRef(null);\r\n    return(\r\n        <div className=\"todo-item\">\r\n            <input \r\n                type=\"checkbox\"\r\n                checked={props.item.completed}\r\n                onChange={(e) => props.handleChange(props.item.id, e)} \r\n            />\r\n            <p>{props.item.text}</p>\r\n            <br />\r\n            <form onSubmit={(e) => props.onSubmit(e)}>\r\n                <input \r\n                    type=\"text\" \r\n                    name={props.item.id} \r\n                    placeholder={props.item.text} \r\n                    ref={inputRef}\r\n                    onChange={(e) => props.handleChange(props.item.id, e)} \r\n                />\r\n                <button>Edit</button>\r\n                <button>Delete</button>                \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todos;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer>Remember to check your list atleast twice a day!</footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, {useState, useEffect} from \"react\"\nimport firebase from \"./Components/firebase\"\nimport Header from \"./Components/Header\"\nimport Todos from \"./Components/Todos\"\nimport Footer from \"./Components/Footer\"\nimport { Link } from \"react-router-dom\";\n\nfunction App() {\n\n    // `prevTodos` stores the data firebase into an array of object\n    const [prevTodos, setTodos] = useState([])\n    const [didOnsubmitRun, setOnsubmit] = useState(false)\n\n    useEffect(() => {\n        if(didOnsubmitRun === true) setOnsubmit(false) // if the state is 'true', it will make it 'false'\n    }, [didOnsubmitRun])\n\n    // 1. Runs once, getting access to the DB. Then, it gets the raw json from it \n    useEffect(() => {\n        // 2. Get the firebase object needed to get access to their database. Then...\n        const database = firebase.database().ref();\n        // ...runs `logData()` if there is any values in the DB and passes any values to it.        \n        database.on(\"value\", logData)  \n    }, [])\n\n    function logData(rowData) {\n        // 3. store the raw json file in `unFlattenTodo`\n        let unFlattenTodo =  [rowData.val()]\n        // Component `Todos` can't render the data until it is flatten: \"The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.\"\n        // More detail at \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"\n        // 4. Store the flatten array into `flattenTodo`\n        let flattenTodo = unFlattenTodo.flatMap(todos => Object.values(todos))  \n        // 5. Store `flattenTodo` into the state of `prevTodos`\n        setTodos(flattenTodo) \n    } \n\n    function handleChange(id, event) {\n        const {name, value, type, checked} = event.target\n        const updatedCheckbox = prevTodos.map(checkBox => {\n            if (checkBox.id === id && type === \"checkbox\") {\n                checkBox.completed = !checkBox.completed       \n            }\n            return checkBox\n        })\n\n        const updatedText = prevTodos.map(todo => {\n            if (todo.id === id && type === \"text\") {\n                    todo.text = event.target.value                            \n            }\n            return todo\n        })\n\n        type === \"checkbox\" ? \n        setTodos(updatedCheckbox) \n        : \n        type === \"text\" && didOnsubmitRun ? \n        setTodos(updatedText)\n        :  \n        console.log(\"!\");  \n    }\n    function onSubmit(event) {\n        event.preventDefault()\n        setOnsubmit(true)   \n}\n    // 6. `todoComponents` maps the array, giving one individual object to one Todo component at a time, looping as times as the number of objects in the array.\n    // So if their are five todo objects in `prevTodos`, it runs five times\n    let todoComponents = prevTodos.map(item => <Todos key={item.id} item={item} handleChange={handleChange} onSubmit={onSubmit}/>)\n    console.log(prevTodos);\n    \n    // Return renders everything to the screen(elements & components). It's always the very last step.\n    return (\n        <div>\n            <Header />\n            <div className=\"todo-list\">\n                <Link to=\"/createtodo\">Add Todo!</Link>\n                {todoComponents}\n            </div>  \n            <Footer /> \n        </div>                             \n    )\n}\n\nexport default App","import React, {useState} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport  { Redirect } from 'react-router-dom'\r\nimport firebase from \"firebase\"\r\n\r\nfunction CreateTodo() {\r\n    // 1. Get the firebase object needed to get access to their database. Then...\r\n    const database = firebase.database().ref();\r\n    const [newTodo, addTodo] = useState(\"\")\r\n    const [redirectToHome, gotoHome] = useState(false)\r\n    // 5. It runs when the form is submitted. Any value(number, text, etc) in the the input box is sent to the DB, creating a new todo.\r\n    function updateDBLocal() {\r\n        // push to the `value` into the DB.\r\n        const value = database.push() \r\n        value.set({\r\n            // False because most people wouldn't add a goal they already completed\r\n            completed: false,\r\n            // This is important for checkboxes becauses it gives them an indiviual id. Without this, \r\n            // ...the program doesn't know which checkbox to check/toggle.\r\n            id: value.key,\r\n            // `newTodo` is whatever the user text user put into the input box. Ex. If user put \"Go to school\", it is stored in...\r\n            // `newTodo` then pushed to the DB to create a new Todo.\r\n            text: newTodo,   \r\n        })\r\n        gotoHome(true)\r\n    }\r\n    // 3. `handleChange` runs if an event is triggered. Then...\r\n    function handleChange(event) {\r\n        // ...it gets the value of the input box and stores it into `newTodo` using `addTodo`\r\n        addTodo(event.target.value)\r\n    }\r\n    return(\r\n        <div>\r\n            <h2>What's your goal?</h2>\r\n            {/* 4. When user submits form(using the \"Add Todo!\" button) `updateDB()` is run */}\r\n            <form onSubmit={updateDBLocal}>\r\n                {/* 2. When user types anything into the input box run `handleChange()` using `onChange` */}\r\n                <input \r\n                type=\"text\"\r\n                name=\"goal\"\r\n                placeholder=\"Write todo here...\"\r\n                onChange={handleChange}>\r\n                </input>\r\n                <button>Add Todo!</button>\r\n                <Link to=\"/\">\r\n                    <button>Cancel</button>\r\n                </Link>\r\n            </form>\r\n            {/* When user clicks the \"cancel\" or \"Add Todo!\" buttton, they are redirected to the home page */}\r\n            {redirectToHome === true ? <Redirect to=\"/\" /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateTodo;","import React from 'react';\r\n\r\nfunction EditDeleteTodo() {\r\n    return (\r\n        <div>\r\n            <br />\r\n            <h1>a</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditDeleteTodo","// Built in-Components\n// Allows on to us the React library\nimport React from 'react';\n// Renders a DOM to the screen, creating the visual content that the user sees\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n// Made components\nimport App from './App';\nimport CreateTodo from \"./Components/CreateTodo\"\nimport EditDeleteTodo from \"./Components/EditDeleteTodo\"\n\n\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route path=\"/\" exact component={App} />\n      <Route path=\"/createtodo\"  exact component={CreateTodo} />\n      <Route path=\"/editDeleteTodo\"  exact component={EditDeleteTodo} />\n    </Switch>\n  </Router>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}